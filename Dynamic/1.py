goods = [2, 2, 6, 5, 4]
price = [6, 3, 5, 4, 6]
load = 10
dp = [0 for i in range(load)]
print(dp)

# 换个角度，动态规划就是搜索不同的分割方法，并存储一定长度上能达到的最好效果
# 而这个一定长度上的最好效果可能包括了其内部的其他分割方法
# 那么我们算法实现中就从最短的开始计算。当i从小变大的时候，j就代表i的不同分割方法的 分割点。
# i逐渐变大的过程中，这里计算的是最小子集的最大值，和稍大一点的子集的分割方法。当i拉满的时候，就是整体的最优分割方法了
# 总结，j为分割点，i代表不同长度的子集。的最优分割方案。

for i in range(len(dp)-1):
    for j in range(i):
        price =dp[j] +dp[i-j]
        dp[i] = max(price,dp[i])



